name: Deploy Serverless Website via Terraform

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-2
  IAM_GITHUB_ROLE_NAME: terraform-website-github
  TF_VAR_bucket_name: terraform.eivistamos.co.uk
  TF_VAR_domain_name: terraform.eivistamos.co.uk
  TF_VAR_acm_certificate_arn: ${{ secrets.TF_VAR_acm_certificate_arn }}
  TF_VAR_hosted_zone_id: ${{ secrets.TF_VAR_hosted_zone_id }}
  TF_BACKEND_BUCKET: terraform-state-eivistamos
  TF_BACKEND_KEY: static-site/terraform.tfstate
  TF_BACKEND_TABLE: terraform-locks

jobs:

  prepare-state:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.IAM_GITHUB_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check/Create State Bucket
        run: |
          if ! aws s3api head-bucket --bucket ${{ env.TF_BACKEND_BUCKET }} 2>/dev/null; then
              echo "Bucket ${{ env.TF_BACKEND_BUCKET }} does not exist. Creating..."
              aws s3api create-bucket \
                  --bucket ${{ env.TF_BACKEND_BUCKET }} \
                  --create-bucket-configuration LocationConstraint=${{ env.AWS_REGION }}
              echo "Bucket created."
              aws s3api put-bucket-versioning \
                  --bucket ${{ env.TF_BACKEND_BUCKET }} \
                  --versioning-configuration Status=Enabled
          else
              echo "Bucket ${{ env.TF_BACKEND_BUCKET }} already exists."
          fi  

      - name: Check/Create DynamoDB Table for State Locking
        run: |
          if ! aws dynamodb describe-table --table-name ${{ env.TF_BACKEND_TABLE }} 2>/dev/null; then
              echo "Table ${{ env.TF_BACKEND_TABLE }} does not exist. Creating..."
              aws dynamodb create-table \
                  --table-name ${{ env.TF_BACKEND_TABLE }} \
                  --attribute-definitions AttributeName=LockID,AttributeType=S \
                  --key-schema AttributeName=LockID,KeyType=HASH \
                  --billing-mode PAY_PER_REQUEST
          else
              echo "Table ${{ env.TF_BACKEND_TABLE }} already exists."
          fi   

  terraform:
    runs-on: ubuntu-latest
    needs: prepare-state

    outputs:
      distribution_id: ${{ steps.output_distribution.outputs.distribution_id }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set-up terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.IAM_GITHUB_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialise Terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
            -backend-config="key=${{ env.TF_BACKEND_KEY }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_BACKEND_TABLE }}" \
            -backend-config="encrypt=true"

      - name: Terraform Plan
        run: terraform plan 

      - name: Terraform Apply
        run: terraform apply -auto-approve 

      - name: Capture CloudFront Distribution ID
        id: output_distribution
        run: |
          DIST_ID=$(terraform output -raw cloudfront_distribution_id)
          echo "distribution_id=$DIST_ID" >> $GITHUB_OUTPUT

  sync-site:
    runs-on: ubuntu-latest
    needs: terraform
    steps:

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.IAM_GITHUB_ROLE_NAME }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Sync Site Files
      run: |
        echo "Syncing site/ folder to S3 bucket..."
        aws s3 sync ./site s3://${{ env.TF_VAR_bucket_name }} --delete

    - name: Invalidate CloudFront Cache
      run: |
        echo "Invalidating CloudFront cache..."

        aws cloudfront create-invalidation --distribution-id "$DISTRIBUTION_ID" --paths "/*"

        echo "Deployment + S3 sync complete. Site live at https://${{ env.TF_VAR_domain_name }}"