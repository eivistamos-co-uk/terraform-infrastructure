name: Deploy Serverless Website via Terraform

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-2
  IAM_GITHUB_ROLE_NAME: terraform-website-github
  TF_VAR_bucket_name: terraform.eivistamos.co.uk
  TF_VAR_domain_name: terraform.eivistamos.co.uk
  TF_VAR_acm_certificate_arn: ${{ secrets.TF_VAR_acm_certificate_arn }}
  TF_VAR_hosted_zone_id: ${{ secrets.TF_VAR_hosted_zone_id }}

jobs:

  terraform:
    runs-on: ubuntu-latest

    outputs:
      distribution_id: ${{ steps.output_distribution.outputs.distribution_id }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set-up terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.IAM_GITHUB_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init 

      - name: Terraform Plan
        run: terraform plan 

      - name: Terraform Apply
        run: terraform apply -auto-approve 

      - name: Capture CloudFront Distribution ID
        id: output_distribution
        run: |
          DIST_ID=$(terraform output -raw cloudfront_distribution_id)
          echo "distribution_id=$DIST_ID" >> $GITHUB_OUTPUT

  sync-site:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
    - name: Sync Site Files
      run: |
        echo "Syncing site/ folder to S3 bucket..."
        aws s3 sync ./site s3://${{ env.TF_VAR_bucket_name }} --delete

    - name: Invalidate CloudFront Cache
      run: |
        echo "Invalidating CloudFront cache..."

        aws cloudfront create-invalidation --distribution-id "$DISTRIBUTION_ID" --paths "/*"

        echo "Deployment + S3 sync complete. Site live at https://${{ env.TF_VAR_domain_name }}"